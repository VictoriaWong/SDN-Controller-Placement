# =======================================================
# Experiment setting: small data center: same controller capacity 45000 * 10 + 30000 * 5 small latency<1ms
# Controller Placement
# ctl_num = 50
# ctl_capacity = [45K x 10, 30K x 10, 60K x 10, 90K x 10, 15K x 10]
# latency = [ 0.001, 0.011, 0.027, 0.025, 0.022, 0.049, 0.019, 0.038, 0.028, 0.040,
#                          0.019, 0.003, 0.013, 0.045, 0.046, 0.035, 0.017, 0.047, 0.013, 0.020,
#                          0.049, 0.009, 0.004, 0.032, 0.005, 0.019, 0.014, 0.007, 0.018, 0.020,
#                          0.049, 0.043, 0.023, 0.034, 0.012, 0.032, 0.044, 0.009, 0.002, 0.014,
#                          0.002, 0.006, 0.015, 0.030, 0.013, 0.009, 0.026, 0.041, 0.046, 0.021]
# pkt_in_rate = [720K]

# Gradient descent
# learning rate: 0.0001 - 0.0015
# iterationNum = 30

# GA:
# population = 200
# random.seed (64)
# =======================================================
from matplotlib import pyplot as plt
import numpy as np

iter = range(0, 81, 1)
# ONOS 1 result: random.seed(64)
fitness1 = [0.0178446186889, 0.017127773542940362, 0.017127773542940362, 0.016806777323679516, 0.016806777323679516,
            0.016806777323679516,
            0.016025002306703052, 0.013228965658738321, 0.013228965658738321, 0.013228965658738321,
            0.011744382396001946,
            0.011744382396001946, 0.011744382396001946, 0.011744382396001946, 0.011423391871263689,
            0.011340781578181547,
            0.011340781578181547, 0.010614190299996067, 0.010358508294158362, 0.010305101063039513,
            0.010305101063039513,
            0.010173557345451773, 0.0095819342078814172, 0.0095819342078814172, 0.0090760132679294832,
            0.0090760132679294832,
            0.0090760132679294832, 0.0090760132679294832, 0.0090760132679294832, 0.0090760132679294832,
            0.0089128937611839525,
            0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525,
            0.0089128937611839525,
            0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525,
            0.0089128937611839525,
            0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525, 0.0089128937611839525,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006,
            0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006, 0.0088548551210925006,
            0.0088548551210925006]
plt.figure(1)
plt.plot(iter, fitness1)

# ONOS 2 result: random.seed(128)
fitness2 = [0.023455722558, 0.023231793658492258, 0.02007841866662597, 0.019171221980606622, 0.018507226478355902,
            0.016462973995600063,
            0.016462973995600063, 0.015478720649770433, 0.014979952807264814, 0.013543724437494332,
            0.013543724437494332,
            0.013543724437494332, 0.011186521528578615, 0.011186521528578615, 0.011186521528578615,
            0.011186521528578615,
            0.011186521528578615, 0.011186521528578615, 0.01066033622714814, 0.01055664517823555, 0.01055664517823555,
            0.010388794691584706, 0.010214049710184612, 0.0099852578788663052, 0.0099852578788663052,
            0.0097771040874990098,
            0.009701356994220884, 0.009701356994220884, 0.0096338085263221688, 0.0092240702695677475,
            0.0091173194702963319,
            0.0088016090584538964, 0.0088016090584538964, 0.0088016090584538964, 0.0088016090584538964,
            0.0087166350873171729,
            0.0087166350873171729, 0.0086246215617048066, 0.0085511652011657658, 0.0085511652011657658,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142,
            0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142, 0.0083862016448824142,
            0.0083862016448824142]
plt.plot(iter, fitness2)

fitness3 = [0.0212278508433, 0.019425273974660113, 0.018891009954397082, 0.018891009954397082, 0.017470275955169399,
            0.01555179908025818,
            0.01555179908025818, 0.01555179908025818, 0.015021009149120666, 0.014003797278022914, 0.013748320894374493,
            0.013576082993390781, 0.013194790034619366, 0.012502044925162097, 0.012163576481167785,
            0.011848999315888991,
            0.011392385362191846, 0.011392385362191846, 0.011392385362191846, 0.010389526709799021,
            0.010389526709799021,
            0.010389526709799021, 0.010389526709799021, 0.0096965724163566146, 0.0096965724163566146,
            0.0094369205085225848,
            0.0094369205085225848, 0.0094369205085225848, 0.0092401318065822753, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631,
            0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631, 0.0090976520305047631,
            0.0090976520305047631]
plt.plot(iter, fitness3)

fitness4 = [0.0208683193395, 0.0208683193395, 0.016870201822194942, 0.016870201822194942, 0.016870201822194942,
            0.015414007451628374,
            0.015414007451628374, 0.015414007451628374, 0.013561989028077809, 0.013561989028077809,
            0.011971398020375949,
            0.011914311472020689, 0.011914311472020689, 0.010470308169498118, 0.010470308169498118,
            0.010470308169498118,
            0.0098239431497784951, 0.0091275593579733839, 0.0091275593579733839, 0.0091275593579733839,
            0.0089986070387749455,
            0.008797609591077853, 0.0085417359315294629, 0.0085417359315294629, 0.0083673355356309303,
            0.0083673355356309303,
            0.0083673355356309303, 0.0083673355356309303, 0.0083673355356309303, 0.0083610939893221919,
            0.0083047086374338722,
            0.0083047086374338722, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102,
            0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102, 0.0082925383244180102,
            0.0082925383244180102]
plt.plot(iter, fitness4)

fitness5 = [0.022057706151, 0.022023270572369653, 0.020510928576083571, 0.019979192697332334, 0.018181663532450345,
            0.018181663532450345,
            0.01588427237440437, 0.014664264595321651, 0.014664264595321651, 0.014002396984442488, 0.012910056123724383,
            0.012910056123724383, 0.011310592001380879, 0.011310592001380879, 0.011310592001380879,
            0.0099334789528758606,
            0.0099334789528758606, 0.0096399738647109864, 0.009448952349031434, 0.009448952349031434,
            0.0093939588529044146,
            0.0091369649342522806, 0.0091263439050108773, 0.0090604214756984554, 0.0085672825247143213,
            0.0084746163303660721,
            0.0082925383244180102, 0.0080575873238586983, 0.0080575873238586983, 0.0080575873238586983,
            0.0080575873238586983]
fitness5.extend([0.0080575873238586983] * 50)
plt.plot(iter, fitness5)

fitness6 = [0.0165576854351, 0.0165576854351, 0.0165576854351, 0.0165576854351, 0.014775390537, 0.014775390537,
            0.014775390537, 0.0129147180713, 0.0129147180713, 0.012452570551, 0.012452570551,
            0.0119998680508, 0.0116091280185, 0.0115324493129, 0.011045113525, 0.011045113525,
            0.0108432988414, 0.00974655257657, 0.00974655257657, 0.00974655257657, 0.00974655257657,
            0.00950071843837, 0.00899016230203, 0.00899016230203, 0.00899016230203, 0.00899016230203,
            0.00899016230203, 0.00899016230203, 0.00899016230203, 0.0087961007678, 0.0087961007678]
fitness6.extend([0.0087961007678] * 50)
plt.plot(iter, fitness6)

fitness7 = [0.0231313126824, 0.02192029620797856, 0.018389513575394856, 0.018389513575394856, 0.017443261958296419,
            0.015618843969181596,
            0.015618843969181596, 0.013235047823331136, 0.012940972574025222, 0.012940972574025222,
            0.012210763933137591,
            0.011403970080598706, 0.010924070961795764, 0.010924070961795764, 0.010777904333039694,
            0.010235036642698377,
            0.0093577407027182861, 0.0093577407027182861, 0.0093394263796829774, 0.0093394263796829774,
            0.0093394263796829774,
            0.0088552281217862336, 0.0088552281217862336, 0.0088072320307976751, 0.0088072320307976751,
            0.0084746659898761317,
            0.0084746659898761317, 0.0084746659898761317, 0.0084746659898761317, 0.0084591900508243327,
            0.0084591900508243327,
            0.0084591900508243327, 0.0084591900508243327, 0.0084591900508243327, 0.0084591900508243327,
            0.0084591900508243327]
fitness7.extend([0.0084591900508243327] * 45)
plt.plot(iter, fitness7)

fitness8 = [0.0219194855184, 0.019244630728924884, 0.016831757465184796, 0.016831757465184796, 0.016831757465184796,
            0.016831757465184796,
            0.016831757465184796, 0.015435951690021451, 0.014085908877888614, 0.014085908877888614,
            0.013930060209817342,
            0.013680527046235435, 0.013680527046235435, 0.013600032198089309, 0.012818772530320884,
            0.011957672091780907,
            0.01122156512684706, 0.01122156512684706, 0.01122156512684706, 0.010819832800304421, 0.010819832800304421,
            0.009525753639550159, 0.009525753639550159, 0.009525753639550159, 0.009525753639550159,
            0.009525753639550159,
            0.009525753639550159, 0.009525753639550159, 0.009525753639550159, 0.0090581866164970992,
            0.0087923264767527202,
            0.0086761197158258564, 0.0086761197158258564, 0.0084858589456628525, 0.0084858589456628525,  0.0084858589456628525]
fitness8.extend([0.0084858589456628525]*45)
plt.plot(iter, fitness8)

plt.xlabel("Iteration")
plt.ylabel("Fitness")
plt.axis([0, 81, 0.0075, 0.025])
# plt.savefig('scen3_ga.pdf', bbox_inches='tight')
# plt.close()
# ==========================================================

# response time!!!!!!!!!!!!!
plt.figure()
fig, ax = plt.subplots()
width = 0.5
N = 4
ind = np.arange(N)
# winsize = [1300, 2600, 3900, 5200]
response_time = [0.020041080557805957, 0.010567598093164293, 0.03265922263781412, 0.0083462016448824142]
capacity = [88.5, 90, 90, 75]
ax.bar(ind, response_time, width=width, align='center', alpha=0.5)
ax.set_xticks(ind)
ax.set_xticklabels(['Random', 'Latency-greedy', 'Capacity-greedy', 'GA'])
ax.set_ylabel('Average response time / utilization')

ax2 = ax.twinx()
ax2.plot(ind, capacity)
ax2.set_ylabel('Control plane capacity', color='0.25')
for t1 in ax2.get_yticklabels():
    t1.set_color('0.25')

# plt.savefig('scen3_diffplacement.pdf', bbox_inches='tight')
# plt.close()


plt.figure()
pkt_in_rate = [350, 400, 500, 600]
avg_random = [0.00834888593475, 0.281475200378, 0.44237894895, 0.543891881949]
avg_roundrobin = [0.00820008651831, 0.280078004491, 0.442517325306, 0.543970711019]
capacity = [ ]
avg_response_time_weighted = [0.00815470668805, 0.0244010305082, 0.161629711259, 0.30912335956]
gradient_based = []

plt.plot(pkt_in_rate, avg_random, 'yo-')
plt.plot(pkt_in_rate, avg_roundrobin, 'r*-')
# plt.plot(pkt_in_rate, avg_workload_weighted, 'b.-')
plt.plot(pkt_in_rate, avg_response_time_weighted, 'g+-')
# plt.plot(pkt_in_rate, avg_gradient_based_weighted, 'm<-')
# plt.legend(['random','round-robin', 'CBP','RTBP', 'GBP'], loc='upper left')

plt.xlabel("Packet-in arrival rate (x1000 pkts/s)")
plt.ylabel("Average response time (s)")

# plt.show()

capa = [45000, 45000, 45000, 45000, 45000, 45000, 45000, 45000, 45000, 45000,
                         30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000, 30000,
                         60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000,
                         90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000, 90000,
                         15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000]
latency = [ 0.001, 0.011, 0.027, 0.025, 0.022, 0.049, 0.019, 0.038, 0.028, 0.040,
                         0.019, 0.003, 0.013, 0.045, 0.046, 0.035, 0.017, 0.047, 0.013, 0.020,
                         0.049, 0.009, 0.004, 0.032, 0.005, 0.019, 0.014, 0.007, 0.018, 0.020,
                         0.049, 0.043, 0.023, 0.034, 0.012, 0.032, 0.044, 0.009, 0.002, 0.014,
                         0.002, 0.006, 0.015, 0.030, 0.013, 0.009, 0.026, 0.041, 0.046, 0.021]

a =  [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0]
temp = [x*y for x,y in zip(capa, a)]
print sum(temp)
temp1 = [x*y for x,y in zip(latency,a)]


print ("===========")
a =  [0, 1, 11, 12, 16, 18, 21, 22, 24, 26, 27, 34, 37, 38, 39, 40, 41, 42, 44, 45]
solu = [0]*len(capa)
capacity = []
lat=[]
for i in a:
    solu[i]=1
    capacity.append(capa[i])
    lat.append(latency[i])

print("capa:%s"%capacity)
print sum(capacity)
print("late:%s"%lat)

temp2 = [x*y for x,y in zip(capa, solu)]
temp3 = [x*y for x,y in zip(latency,solu)]
# print temp
# print sum(temp)
print temp2
print sum(temp2)
# print temp1, sum(temp1)
print temp3, sum(temp3)